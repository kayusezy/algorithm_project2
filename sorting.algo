Algorithm: Insertion Sort

Purpose:
    Sort an array of integers in ascending order using the Insertion Sort algorithm.

Input:
    - arr: An array of integers to be sorted.

Output:
    - arr: The sorted array of integers.

Steps:
1. Start with the second element (index 1) in the array.
2. Iterate through the array:
    a. Set current element as arr[i].
    b. Initialize j to i-1.
    c. While j >= 0 and arr[j] > current:
        - Shift arr[j] one position to the right (arr[j + 1] = arr[j]).
        - Decrement j.
    d. Place current element in the correct position (arr[j + 1] = current).
3. Repeat steps 2 until the entire array is sorted.
4. Return the sorted array arr.

Example:
    Input: [5, 2, 4, 6, 1, 3]
    Output: [1, 2, 3, 4, 5, 6]

Complexity:
    - Time Complexity: O(n^2) in worst case.
    - Space Complexity: O(1) additional space.

Notes:
    - Insertion Sort is efficient for small datasets or nearly sorted datasets.
    - It operates in-place, making it suitable for scenarios where memory is limited.
